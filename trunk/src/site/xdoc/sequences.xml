<?xml version="1.0" encoding="UTF-8"?>
<document>
	<properties>
		<author>SÃ©rgio Taborda</author>
		<title>Sequence Toolbox</title>
	</properties>
	<body>
	<section name="Sequence Toolbox">
		<p>
			Let's start with a simple toolbox: the sequence toolbox. A Sequence represents a generator of tokens with 
			and inherent order. Normally we will use a sequence to generate numeric tokens 
			but it can be use to generate almost anything you need.  
		</p>
	</section>
	<section name="Properties of a Sequence">
		<p>
			A sequence is characterized mainly by three properties:
			<ul>
				<li>Order - the sequence produces tokens in a specific order (normally ins ascendant order). As a 
				consequence the token must contain an object with a natural order.</li>
				<li>Gap Resilience - the sequence may accept gaps or not. Accept gaps means not all token values must be used.
				Example: an integer sequence car run like : 1, 2, 3 , 6, 7,8 ... not using the 4 or the 5 for the token value.</li>
				<li>Limit - the sequence may stop because no more tokens are possible. Although conceptually a sequence may have an infinite number of tokens, in practice no sequence is infinite
				Has so, all sequences in MiddleHeavewn are considered "potentially infinite" , i.e. they would be infinite if there was no computational/environmental limit.
				thus, limited sequence are those that we know would never be infinite (e.g. a sequence based on the items of an array) 
				</li>
			</ul>
		</p>
		<p>
		All sequences in MiddleHevaen are considerer ordered, unlimited and allow gaps. 
		Sequences that are not ordered must inherit from <code>RandomSequence</code>. This is mainly a marker interface as no method is added to the interface.<br/>
		Sequence that are intended to be limited must implement <code>LimitedSequence</code>. <code>LimitedSequence</code> adds an <code>hasNext</code> 
		method to check if there are more tokens in the sequence.<br/>
		Gap resiliance is a more difficult feature to implement has it must be defined over a transaction context. It two transactions <b>A</b> and <b>B</b>
		acquire tokens from the same sequence and <b>A</b> rollback, the dumped tokens must be reused by <b>B</b>, has there can't be gaps.
		<code>TransactableSequence</code> tries to address this by locking the sequence to a specific transaction until it ends (committing or rolling back)
		</p>
	</section>
	<section name="Model">
		<p>
			The figure below illustrates the basic set of sequence types in MiddleHeaven and who the relate to each other.
			<center>
			<img src="sequencesuml.png"/>
			</center>
			Not all sequences are presente as some are implement inside other toolboxes. I'll talk about them later.<br/>
			Following the Separation of Concerns principle all basic types are modeled as interfaces. 
			All sequences are type-generic and have a  <code>next()</code> method that return the next token in the sequence.
		    <code>StateEditableSequence</code> allows for manipulation of the sequence state (read/write). This is usefull mainlly 
			for defining <code>StatePersistableSequence</code>, a sequence whose state can be persisted so it never resets. 
			This will be most usefull for identity generation has we will see when we discuss the Storage Toolbox.
		</p>	
		<p>
			<code>RandomCharSequence</code> can be used to generate random sequence of characters (that may be further converted into String) 
			and <code>RandomNumberSequence</code> can be used to generate random sequences of numbers. For both instances of <class>Random</class> can be specified 
			for better control.
		</p>
	</section>
	<section name="Use">
		<p>
		Using a sequence is very simple:
		<pre name="source" class="java">
			Sequence&lt;Long&gt; sequence = new LongSequence();
			
			Long value = sequence.next().value();
		</pre> 
		</p>
		<p>
			Sequences can be used <i>per se</i> or in conjunction or within other toolboxes. The Storage Toolbox uses sequences
			to create different identification tokens for storable objects. For database supported storage MiddleHeaven abstracts the native sequence mechanism present in some 
			databases as a Sequence of Long.
		</p>
	</section>
	</body>
</document>
